{
##who are you going to talk to today.
sneezers <- rep(1:numAgents,each=numInteractions)
sneezedons <- rep(NA,length(sneezers))
for(i in 1:length(sneezers))
{
if(runif(1)<(1-sampleFromNetwork))
{
sneezedons[i] <- sample(numAgents,1)
}else{
sneezedons[i] <- sample(1:numAgents,prob=socialnetwork[sneezers[i],],1)
}
}
for(i in 1:length(sneezers))
{
agent1 <- pool[[ sneezers[i] ]]
agent2 <- pool[[ sneezedons[i] ]]
##this constitutes the rules of infection.
if((agent1$c_state==3) & (agent2$c_state=1) ) #& runif(1)<contagionProb) ### NB! problem here. We allow the interaction only if the second agent is in the 1st state. This makes sense, HOWEVER,there is a possibility that a spreader will inteact with a spreader.
{
pool[[ sneezedons[i] ]] <- setAgentState(agent2, consumer=2, digital_literacy = agent2$c_literacy, producer_quality = agent1$p_quality, producer_pref = agent1$p_pref ) ##infect!
}
}
## subset the pool to those that are not initially set and calculate mean in consumer preferences
pool2 <- pool
for (i in id_infected){pool2[[i]] <- NA}
pool3 <- pool2[!(is.na(pool2))]
x <- NA
for ( i in 1:length(pool3)){x[i]<-pool3[[i]]$c_pref}
mean_cp.df[day+1,1] <- mean(x)
distrib <- table(factor(sapply(pool,FUN=function(x){x$c_state}),levels=1:4))
# distrib2 <- table(factor(sapply(pool,FUN=function(x){x$c_pref}),levels=1:10))
# distrib3 <- table(factor(sapply(pool,FUN=function(x){x$p_pref}),levels=1:10))
distrib2 <- table(factor(sapply(pool,FUN=function(x){x$c_pref}),levels=seq(0.1,1,0.1)))
distrib3 <- table(factor(sapply(pool,FUN=function(x){x$p_pref}),levels=seq(0.1,1,0.1)))
consumer_state_history[day+1,] <- distrib
consumer_pref_history[day+1,] <- distrib2
producer_pref_history[day+1,] <- distrib3
##increment each agent 1-day.
for(i in 1:numAgents)
{
pool[[i]] <- updateAgent(pool[[i]])
}
# if(plotNetwork)
# {
#   mygplot(cc,socialnetwork,states,main=paste("Iteration",day))
# }
}
# mean absolute difference in consumer preferences over iterations
mean_cp.df$diff <- abs(mean_cp.df$initial_mean - mean_cp.df$mean_simulation)
mean_cp.df
# table of states over iterations
disthist.df <-as.data.frame(consumer_state_history)
colnames(disthist.df) <- Consumer_state_names
disthist.df$iteration <- c(1:nrow(disthist.df)-1)
# table of consumer preferences over iterations
consumer_pref_history.df <- as.data.frame(consumer_pref_history)
colnames(consumer_pref_history.df) <- 1:10
consumer_pref_history.df$iteration <- c(1:nrow(consumer_pref_history)-1)
# print(kable(consumer_pref_history.df))
# table of producer preferences over iterations
producer_pref_history.df <- as.data.frame(producer_pref_history)
colnames(producer_pref_history.df) <- 1:10
producer_pref_history.df$iteration <- c(1:nrow(producer_pref_history)-1)
# print(kable(producer_pref_history.df))
simulations_mean_cp_df[[j]] <- mean_cp.df
simulations_c_state[[j]] <- disthist.df
simulations_c_pref[[j]] <- consumer_pref_history.df
simulations_p_pref[[j]] <- producer_pref_history.df
}
# get the mean of the N simulations
simulations_mean_cp_df_mean_9 = as.data.frame(aaply(laply(simulations_mean_cp_df, as.matrix), c(2, 3), mean))
simulations_c_state_mean = as.data.frame(aaply(laply(simulations_c_state, as.matrix), c(2, 3), mean))
simulations_c_pref_mean = as.data.frame(aaply(laply(simulations_c_pref, as.matrix), c(2, 3), mean))
simulations_p_pref_mean = as.data.frame(aaply(laply(simulations_p_pref, as.matrix), c(2, 3), mean))
## SEIR histogram
# histlong <- melt(disthist.df,id.vars="day")
# ggplot(histlong,aes(x=day,y=value,fill=variable)) + geom_bar(stat="identity",position="stack") +
#   theme_bw()
## SEIR plot:
plot1 <- ggplot(melt(simulations_c_state_mean,id.vars="iteration"),aes(x=iteration,group=variable,y=value,color=variable)) + geom_line() + theme_bw() + theme_bw() + ggtitle(label="Social network model (50 simulations)", subtitle="Everyone high DL x uniform distribution of producer preferences") + labs(x="Iteration", y="Count") + labs(color="States") #  + ylim(0,500)
png(file="seir_1.png", width=600, height=500)
plot1
dev.off()
## make consumer pref plot for N simulations:
plot_consumer_pref <- ggplot(melt(simulations_c_pref_mean,id.vars="iteration"),aes(x=iteration,group=variable,y=value,color=variable)) + geom_line() + theme_bw() + ggtitle(label="Social network model-consumer preferences (50 simulations)", subtitle="Everyone high DL x uniform distribution of producer preferences") + labs(x="Iteration", y="Count") + labs(color="Consumer Preferences") # + ylim(20,80)
png(file="consumer_pref_1.png", width=600, height=500)
plot_consumer_pref
dev.off()
## make producer pref plot for N simulations:
plot_producer_pref <- ggplot(melt(simulations_p_pref_mean,id.vars="iteration"),aes(x=iteration,group=variable,y=value,color=variable)) + geom_line() + theme_bw() + ggtitle(label="Social network model-producer preferences (50 simulations)", subtitle="Everyone high DL x uniform distribution of producer preferences") + labs(x="Iteration", y="Count") + labs(color="Producer Preferences") # + ylim(20,90)
png(file="producer_pref_1.png", width=600, height=500)
plot_producer_pref
dev.off()
# change wd as needed:
setwd("C:/Users/Kevin/Documents/GitHub/causal_inference23/code/a_s2016")
library(maptools)
library(foreign)
world <-  readShapePoly("5603/world_countries_boundary_file_world_2002.shp")
install.packages("maptools")
install.packages("maptools")
library(maptools)
install.packages("rgeos")
library(maptools)
rm(list=ls())
library(maptools)
library(foreign)
world <-  readShapePoly("5603/world_countries_boundary_file_world_2002.shp")
world <-  readShapePoly("world_countries_boundary_file_world_2002.shp")
jensen.cc <- read.dta("jensen-rep.dta")
X.vars <- c(	"var5",
"market",
"lgdppc",
"gdpgrowt",
"tradeofg",
"overallb",
"generalg",
"country",
"d2",
"d3")
X.vars.f <- paste(X.vars,collapse="+")
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc)
fit.d <- lm(as.formula(paste("regime~", X.vars.f, sep="")), data=jensen.cc)
d.tilde <- as.numeric(residuals(fit.d))
w <- d.tilde^2
w1 <- tapply(w, jensen.cc$country, mean)
mapnames <-  read.csv("mapnames_filled.csv")
mapnames$weight <- 0
mapnames$weight[match(rownames(w1), mapnames$jensen)] <- as.numeric(w1)
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
attributes(world)$data$incl <- 0
attributes(world)$data$incl[match(mapnames$mapname,attributes(world)$data$NAME)] <- as.numeric(!is.na(mapnames$jensen))
pdf(file="jensen-nominal-map.pdf", height=5, width=8)
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
dev.off()
pdf(file="jensen-effective-map.pdf", height=5, width=8)
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
dev.off()
rm(list=ls())
library(foreign)
library(xtable)
gerb <- read.dta("gerber-huber-analysis-data.dta")
fit <- lm(delta_vacationspend~pre_pid5
+C_age
+C_age2
+C_female
+C_hispanic
+C_black
+C_union
+C_income
+C_incomedkna
+C_educ, data=gerb)
vars.all <- attributes(gerb)$names
labs.all <- attributes(gerb)$var.labels
vars <- c("pre_pid5",
"C_age",
"C_female",
"C_hispanic",
"C_black",
"C_union",
"C_income",
"C_incomedkna",
"C_educ",
"pre_hhincomeforecast",
"post_hhincomeforecast",
"pre_nationaleconforecast",
"post_nationaleconforecast",
"delta_holidayspend",
"delta_vacationspend",
"pre_happy",
"post_happy",
"pre_stateeconforecast",
"post_stateeconforecast")
labs <- labs.all[match(vars, vars.all)]
# summary statistics
wt <- gerb$wt
meannum <- function(x) mean(as.numeric(x), na.rm=T)
sdnum <- function(x) (mean(as.numeric(x)^2, na.rm=T) - mean(as.numeric(x), na.rm=T)^2)^.5
wtmeannum <- function(x) weighted.mean(as.numeric(x),wt, na.rm=T)
wtmeannum2 <- function(x) weighted.mean(as.numeric(x),gerb$weight, na.rm=T)
wtsdnum <- function(x) (weighted.mean(as.numeric(x)^2,wt, na.rm=T) - weighted.mean(as.numeric(x),wt, na.rm=T)^2)^.5
minnum <- function(x) min(as.numeric(x), na.rm=T)
maxnum <- function(x) max(as.numeric(x), na.rm=T)
nomsampmean <- apply(gerb[,vars], 2, meannum)
nomsampsd <- apply(gerb[,vars], 2, sdnum)
effsampmean <- apply(gerb[,vars], 2, wtmeannum)
effsampsd <- apply(gerb[,vars], 2, wtsdnum)
sumstats <- round(100*cbind(nomsampmean,
nomsampsd,
effsampmean,
effsampsd))/100
rownames(sumstats) <- labs
colnames(sumstats) <- c("Mean",
"S.D.",
"Mean",
"S.D.")
xtable(sumstats)
world <-  readShapePoly("world_countries_boundary_file_world_2002.shp")
jensen.cc <- read.dta("jensen-rep.dta")
X.vars <- c(	"var5",
"market",
"lgdppc",
"gdpgrowt",
"tradeofg",
"overallb",
"generalg",
"country",
"d2",
"d3")
X.vars.f <- paste(X.vars,collapse="+")
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc)
fit.d <- lm(as.formula(paste("regime~", X.vars.f, sep="")), data=jensen.cc)
summary(fit.y)
summary(fit.d)
d.tilde <- as.numeric(residuals(fit.d))
w <- d.tilde^2
w1 <- tapply(w, jensen.cc$country, mean)
mapnames <-  read.csv("mapnames_filled.csv")
mapnames$weight <- 0
mapnames$weight[match(rownames(w1), mapnames$jensen)] <- as.numeric(w1)
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
attributes(world)$data$incl <- 0
attributes(world)$data$incl[match(mapnames$mapname,attributes(world)$data$NAME)] <- as.numeric(!is.na(mapnames$jensen))
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
attributes(world)$data
attributes(world)$data$weight
sum(attributes(world)$data$weight)
sort(attributes(world)$data$weight, decreasing = T)
plot(sort(attributes(world)$data$weight, decreasing = T))
sum(w)
plot(sort(w, decreasing = T))
rm(list=ls())
library(foreign)
library(xtable)
gerb <- read.dta("gerber-huber-analysis-data.dta")
fit <- lm(delta_vacationspend~pre_pid5
+C_age
+C_age2
+C_female
+C_hispanic
+C_black
+C_union
+C_income
+C_incomedkna
+C_educ, data=gerb)
rm(list=ls())
# change wd as needed:
setwd("C:\Users\natha\OneDrive\Documents\GitHub\causal_inference23\code\a_s2016")
library(foreign)
library(maptools)
world <-  readShapePoly("world_countries_boundary_file_world_2002.shp")
jensen.cc <- read.dta("jensen-rep.dta")
X.vars <- c(	"var5",
"market",
"lgdppc",
"gdpgrowt",
"tradeofg",
"overallb",
"generalg",
"country",
"d2",
"d3")
X.vars.f <- paste(X.vars,collapse="+")
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc)
fit.d <- lm(as.formula(paste("regime~", X.vars.f, sep="")), data=jensen.cc)
summary(fit.y)
summary(fit.d)
d.tilde <- as.numeric(residuals(fit.d))
w <- d.tilde^2
w1 <- tapply(w, jensen.cc$country, mean) #calucalte
mapnames <-  read.csv("mapnames_filled.csv")
mapnames$weight <- 0
mapnames$weight <- 0
mapnames$weight[match(rownames(w1), mapnames$jensen)] <- as.numeric(w1) #replace weight with new weights with row names
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
View(mapnames)
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
attributes(world)$data$incl <- 0
attributes(world)$data$incl[match(mapnames$mapname,attributes(world)$data$NAME)] <- as.numeric(!is.na(mapnames$jensen))
pdf(file="jensen-nominal-map.pdf", height=5, width=8)
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
dev.off()
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
pdf(file="jensen-effective-map.pdf", height=5, width=8)
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
dev.off()
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
View(jensen.cc)
View(mapnames)
View(jensen.cc)
View(world)
#### What are the top 10 individual observations in terms of weight?
jensen.cc$weight<-w
View(jensen.cc)
head(jensen.cc)
library(dplyr)
jensen.cc %>% arrange(weight)
head(jensen.cc %>% arrange(weight))
head(jensen.cc %>% arrange(desc(weight)))
#### WHat is the minimum number of individual observations
####you have to delete in order to eliminate the significant result?
head(jensen.cc)
#### WHat is the minimum number of individual observations
####you have to delete in order to eliminate the significant result?
test<-jensen.cc %>% arrange(desc(weight))
View(test)
#### WHat is the minimum number of individual observations
####you have to delete in order to eliminate the significant result?
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-1,]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.desc[-1:2,]
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:2),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:3),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:4),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:5),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:6),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:7),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:20),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:10),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:20),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:100),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:50),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:75),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:65),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:60),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:61),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:62),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:63),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:64),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
range(jensen.cc$range)
range(jensen.cc$regime)
###generate a new covariate that is
### uniform random in the range of the treatment variable
newvar <- runif(0,20)
###generate a new covariate that is
### uniform random in the range of the treatment variable
newvar <- runif(1630,0,20)
range(newvar)
head(jensen.cc$regime)
###generate a new covariate that is
### uniform random in the range of the treatment variable
newvar <- sample(0:20,1630)
###generate a new covariate that is
### uniform random in the range of the treatment variable
newvar <- sample(0:20,1630, T)
1630/2
###randomly replace half of the values of this covariate with the true value
### of the treatment variable
replace.v<-sample(0:1630, 815)
newvar[replace.v]<-jensen.cc[replace.v]
newvar[replace.v]<-jensen.cc$regime[replace.v]
##re-run the analysis...how does the figure look?
jensen.cc$newvar<-newvar
fit.y <- lm(as.formula(paste("Fvar5~newvar+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
summary(fit.y)
fit.d <- lm(as.formula(paste("newvar~", X.vars.f, sep="")), data=jensen.cc) #predict regime with covars
summary(fit.d)
dev.off()
d.tilde <- as.numeric(residuals(fit.d))
w <- d.tilde^2
w1 <- tapply(w, jensen.cc$country, mean)
mapnames <-  read.csv("mapnames_filled.csv")
mapnames$weight <- 0
mapnames$weight[match(rownames(w1), mapnames$jensen)] <- as.numeric(w1) #replace weight with new weights with row names
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
attributes(world)$data$incl <- 0
attributes(world)$data$incl[match(mapnames$mapname,attributes(world)$data$NAME)] <- as.numeric(!is.na(mapnames$jensen))
# Sample
pdf(file="jensen-nominal-map.pdf", height=5, width=8)
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
dev.off()
plot(	world,
col=gray(1-.75*attributes(world)$data$incl),
border="gray", lwd=.25)
plot(	world,
col=gray(1-abs(attributes(world)$data$weight)/max(abs(attributes(world)$data$weight))),
border="gray", lwd=.25)
jensen.cc$weight<-w
library(dplyr)
head(jensen.cc %>% arrange(desc(weight)))
world <-  readShapePoly("world_countries_boundary_file_world_2002.shp")
jensen.cc <- read.dta("jensen-rep.dta")
X.vars <- c(	"var5",
"market",
"lgdppc",
"gdpgrowt",
"tradeofg",
"overallb",
"generalg",
"country",
"d2",
"d3")
X.vars.f <- paste(X.vars,collapse="+")
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.cc) #predict democracy
fit.d <- lm(as.formula(paste("regime~", X.vars.f, sep="")), data=jensen.cc) #predict regime with covars
summary(fit.y)
summary(fit.d) #several variables are highly predictive of the treatment
#weights are constructed based on the residuals from this partial regression
d.tilde <- as.numeric(residuals(fit.d)) #take residuals
w <- d.tilde^2 #square residuals to get weights
w1 <- tapply(w, jensen.cc$country, mean) #apply mean to weight vector (avg weight for each country across years)
mapnames <-  read.csv("mapnames_filled.csv") #names of countries in world
mapnames$weight <- 0
mapnames$weight[match(rownames(w1), mapnames$jensen)] <- as.numeric(w1) #replace weight with new weights with row names
attributes(world)$data$weight <- 0
attributes(world)$data$weight[match(mapnames$mapname,attributes(world)$data$NAME)] <- mapnames$weight
attributes(world)$data$incl <- 0
attributes(world)$data$incl[match(mapnames$mapname,attributes(world)$data$NAME)] <- as.numeric(!is.na(mapnames$jensen))
#### What are the top 10 individual observations in terms of weight?
jensen.cc$weight<-w
library(dplyr)
head(jensen.cc %>% arrange(desc(weight)))
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc[10]
jensen.desc[10,]
jensen.desc[1:10,]
jensen.desc<-jensen.cc %>% arrange(desc(weight))
jensen.desc<-jensen.desc[-c(1:15),]
fit.y <- lm(as.formula(paste("Fvar5~regime+", X.vars.f, sep="")), data=jensen.desc) #predict democracy
summary(fit.y)
mapnames <-  read.csv("mapnames_filled.csv") #names of countries in world
View(mapnames)
rownames(w1)
match(rownames(wq))
match(rownames(w1))
match(rownames(w1), mapnames$jensen)
